<?php
/**
 * @file
 * Code for the Project Open Data Content feature.
 */

include_once 'opendata_content.features.inc';

/**
 * Implements hook_node_validate().
 */
function opendata_content_node_validate($node, $form, &$form_state) {
  if ($node->type == 'opendata_dataset') {
    module_load_include('inc', 'opendata_content');

    // Check for uniqueness of identifier field.
    if (!opendata_content_uuid_validate($node)) {
      form_set_error('field_opendata_identifier', t('The Unique Identifier supplied is already in use.'));
    }

    // Check that modified is YYYY-MM-DD.
    if (!opendata_content_modified_validate($node)) {
      form_set_error('field_opendata_modified', t('The provided Last Update value is not a valid date or is not in YYYY-MM-DD format'));
    }

    // Validate any URLS to be saved.
    // @TODO Build validation of distribution URL fields too.
    // @TODO get the friendly names of the fields dynamically so they sync.
    $url_fields = array(
      'field_opendata_data_dictionary' => t('Dataset Data Dictionary'),
      'field_opendata_conforms_to' => t('Data Standard'),
      'field_opendata_landing_page' => t('Homepage URL'),
      'field_opendata_ispartof' => t('Collection'),
      'field_opendata_system_of_records' => t('System of Records'),
      'field_opendata_references' => t('Related Documents'),
      'field_opendata_license' => t('License'),
    );

    foreach ($url_fields as $url_field => $field_name) {
      $values = field_get_items('node', $node, $url_field, $node->language);
      if (!empty($values[0]['value'])) {
        foreach ($values as $url) {
          if (!empty($url['value']) && !valid_url($url['value'], TRUE)) {
            form_set_error($url_field, t('The URL: %url in %field_name is not valid.', array(
              '%field_name' => $field_name,
              '%url' => $url['value'],
                )
              )
            );
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_submit().
 *
 * On node submit, if the node being submitted is the node created by default
 * when the opendata_content module is installed, unset the requirement error
 * indicator.
 */
function opendata_content_node_submit($node, $form, &$form_state) {
  if ($node->type == 'opendata_dataset') {
    if (!variable_get('opendata_catalog_node_updated', FALSE)) {
      $catalog_nid = variable_get('opendata_catalog_node', 0);
      if ($node->nid == $catalog_nid) {
        // They're updating the catalog node, so unset the warning.
        variable_set('opendata_catalog_node_updated', TRUE);
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function opendata_content_node_delete($node) {
  if ($node->type == 'opendata_dataset') {
    if ($node->nid == variable_get('opendata_catalog_node', 0)) {
      drupal_set_message(t('You have deleted the Open Data catalog node, which is required by Open Data standards. The Open Data module is no longer tracking this node.'), 'error');
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function opendata_content_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'opendata_dataset_node_form') {
    if (empty($form['field_opendata_identifier'][LANGUAGE_NONE][0]['value']['#default_value'])) {
      module_load_include('inc', 'opendata_content');

      // Code blatantly stolen from Com::generate.
      $form['field_opendata_identifier']['und'][0]['value']['#default_value'] = opendata_content_uuid_create();
    }
  }
}
