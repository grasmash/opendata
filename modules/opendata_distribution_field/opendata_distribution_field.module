<?php
/**
 * @file
 * opendata_distribution_field.module
 */

/**
 * Implements hook_help().
 */
function opendata_distribution_field_help($path, $arg) {
  switch ($path) {
    case 'admin/help#opendata_distribution_field':
      $output = file_get_contents(drupal_get_path('module', 'opendata_distribution_field') . '/README.md');
      if (module_exists('markdown')) {
        // Markdown can be used.
        module_load_include('php', 'markdown', 'markdown');
        $output = Markdown($output);
      }
      else {
        // Markdown is not available.
        $output = '<pre>' . $output . '</pre>';
      }
      return $output;
  }
}


/**
 * Implements hook_field_info().
 */
function opendata_distribution_field_field_info() {
  return array(
    'opendata_distribution' => array(
      'label' => t('Project Open Data Distribution Field'),
      'description' => t('This field packages dataset distribution data (e.g. json, csv) with an accessUrl or downloadUrl'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'opendata_distribution',
      'default_formatter' => 'opendata_distribution_default',
    ),
  );
}

/**
 * Implements magic callback / psuedo-hook mymodule_field_schema().
 */
function opendata_distribution_field_field_schema($field) {
  if ($field['type'] == 'opendata_distribution') {
    $schema['columns']['access_url'] = array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
    );
    $schema['columns']['conforms_to'] = array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
    );
    $schema['columns']['described_by'] = array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
    );
    $schema['columns']['described_by_type'] = array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
    );
    $schema['columns']['description'] = array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
    );
    $schema['columns']['download_url'] = array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
    );
    $schema['columns']['format'] = array(
      'type' => 'varchar',
      'length' => 15,
      'not null' => FALSE,
    );
    $schema['columns']['media_type'] = array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
    );
    $schema['columns']['title'] = array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
    );

    $schema['indexes'] = array(
      'access_url' => array('access_url'),
      'download_url' => array('download_url'),
      'format' => array('format'),
    );

    return $schema;
  }
}

/**
 * Implements magic callback / psuedo-hook mymodule_field_is_empty().
 */
function opendata_distribution_field_field_is_empty($item, $field) {
  if ($field['type'] == 'opendata_distribution') {
    // A distribution must have either an access url or a download url.
    return (empty($item['access_url']) && empty($item['download_url']));
  }
}

/**
 * Implements magic callback / psuedo-hook mymodule_field_settings_form().
 */
function opendata_distribution_field_settings_form($field, $instance, $has_data) {
  if ($field['type'] == 'opendata_distribution') {
    $settings = $field['setings'];
    $form = '';
    return $form;
  }
}

/**
 * Implements hook_field_validate().
 */
function opendata_distribution_field_field_validate($obj_type, $object, $field, $instance, $langcode, &$items, &$errors) {
  if ($field['type'] == 'opendata_distribution') {
    foreach ($items as $delta => $item) {
      // Test the download_url whose presence then requires a media_type.
      if (!empty($item['download_url'])) {
        // If download_url isn't empty, we need a media_type.
        if (empty($item['media_type'])) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'opendata_distribution_media_type',
            'message' => t('Please provide a Media Type (e.g. text/csv) for the Download URL: !url', array('!url' => $item['download_url'])),
          );
        }
      }

      // Must have at least a access_url or a download_url to be a distribution.
      if (empty($item['access_url']) && empty($item['download_url'])) {
        // Both URL fields are empty. Set everything else to empty to avoid
        // saving  and presenting disconnected data.
        unset($item);
      }
    }
  }
}


/**
 * Implements hook_field_widget_info().
 */
function opendata_distribution_field_field_widget_info() {
  $description = t("Metadata specific to a dataset's resource.");
  $description2 = t('The distribution must a Download URL or an Access URL');
  return array(
    'opendata_distribution' => array(
      'label' => t('Project Open Data Distribution'),
      'field types' => array('opendata_distribution'),
      'description' => "{$description} {$description2}",
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function opendata_distribution_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $base = $element;

  $description = t('URL providing indirect access to a dataset, for example via API or a graphical interface.');
  $description .= '<br /> ' . t('This should be the URL for an indirect means of accessing the data, such as API documentation, a wizard or other graphical interface used to generate a download, feed, or a request form for the data.');
  $description .= '<br /> ' . t('Example: %sample', array('%sample' => 'http://www.agency.gov/api/vegetables/'));
  if ($instance['widget']['type'] == 'opendata_distribution') {
    $iana_media_types = array(
      'application/json' => 'application/json',
      'application/pdf' => 'application/pdf',
      'XML' => drupal_map_assoc(array(
        'application/xml',
        'application/atom+xml',
        'application/rdf+xml',
        'application/rss+xml',
      )),
      'Spreadsheet' => drupal_map_assoc(array(
        'text/csv',
        'application/vnd.oasis.opendocument.spreadsheet',
        'application/vnd.ms-excel',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      )),
      'Other' => drupal_map_assoc(array(
        'application/swagger+json',
        'application/raml+yaml',
        'application/vnd.apiblueprint.ast',
        'application/hal+json',
        'application/hal+xml',
        'application/ld+json',
      )),
    );

    $element['access_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Access URL'),
      '#default_value' => !empty($items[$delta]['access_url']) ? $items[$delta]['access_url'] : NULL,
      '#description' => $description,
      '#weight' => 0,
    ) + $base;

    $description = t('URL providing direct access to a downloadable file of a dataset.');
    $description .= '<br /> ' . t('This must be the direct download URL.');
    $description .= '<br /> ' . t('Must be accompanied by Media Type.');
    $description .= '<br /> ' . t('Other means of accessing the dataset should be expressed using Access URL.');
    $description .= '<br /> ' . t('Example: %sample', array('%sample' => 'http://www.agency.gov/vegetables/listofvegetables.csv'));
    $element['download_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Download URL'),
      '#default_value' => !empty($items[$delta]['download_url']) ? $items[$delta]['download_url'] : NULL,
      '#description' => $description,
      '#weight' => 1,
    ) + $base;

    $element['media_type'] = array(
      '#type' => 'select',
      '#multiple' => FALSE,
      '#title' => t('Media Type'),
      '#default_value' => !empty($items[$delta]['media_type']) ? $items[$delta]['media_type'] : NULL,
      '#description' => t('The machine-readable file format (IANA Media Type or MIME Type) of the distribution’s downloadURL.'),
      '#empty_option' => '- ' . t('None') . ' -',
      '#options' => $iana_media_types,
      '#weight' => 2,
    ) + $base;

    $description = t('URI used to identify a standardized specification the distribution conforms to.');
    $description .= '<br /> ' . t('Example: %sample', array('%sample' => 'http://www.agency.gov/vegetables-data-standard/'));
    $element['conforms_to'] = array(
      '#type' => 'textfield',
      '#title' => t('Data Standard'),
      '#default_value' => !empty($items[$delta]['conforms_to']) ? $items[$delta]['conforms_to'] : NULL,
      '#description' => $description,
      '#weight' => 3,
    ) + $base;

    $description = t('URL to the data dictionary for the distribution found at the downloadURL.');
    $description .= '<br /> ' . t('Example: %sample', array('%sample' => 'http://www.agency.gov/vegetables/schema.json'));
    $element['described_by'] = array(
      '#type' => 'textfield',
      '#title' => t('Data Dictionary'),
      '#default_value' => !empty($items[$delta]['described_by']) ? $items[$delta]['described_by'] : NULL,
      '#description' => $description,
      '#weight' => 4,
    ) + $base;

    $element['described_by_type'] = array(
      '#type' => 'select',
      '#multiple' => FALSE,
      '#title' => t('Data Dictionary Type'),
      '#default_value' => !empty($items[$delta]['described_by_type']) ? $items[$delta]['described_by_type'] : NULL,
      '#description' => t('The machine-readable file format (IANA Media Type or MIME Type) of the distribution’s Data Dictionary URL'),
      '#empty_option' => '- ' . t('None') . ' -',
      '#options' => $iana_media_types,

      '#weight' => 5,
    ) + $base;

    $description = t('Human-readable name of the distribution. Acronyms should be avoided.');
    $description .= '<br /> ' . t('Example: %sample', array('%sample' => 'listofvegetables.csv'));
    $element['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#default_value' => !empty($items[$delta]['title']) ? $items[$delta]['title'] : NULL,
      '#description' => $description,
      '#weight' => 6,
    ) + $base;

    $description = t('Human-readable description of the distribution.');
    $sample = t('Vegetable data as a zipped CSV file with attached data dictionary.');
    $description .= '<br /> ' . t('Example: %sample', array('%sample' => $sample));
    $element['description'] = array(
      '#type' => 'textfield',
      '#title' => t('Description'),
      '#default_value' => !empty($items[$delta]['description']) ? $items[$delta]['description'] : NULL,
      '#description' => $description,
      '#weight' => 7,
    ) + $base;

    $description = t('A human-readable description of the file format of a distribution.');
    $description .= '<br />' . t('Note: API should always be used to distinguish web APIs.');
    $description .= '<br /> ' . t('Example: %sample', array('%sample' => 'CSV'));
    $element['format'] = array(
      '#type' => 'textfield',
      '#title' => t('Format'),
      '#default_value' => !empty($items[$delta]['format']) ? $items[$delta]['format'] : NULL,
      '#description' => $description,
      '#weight' => 8,
    ) + $base;
  }
  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function opendata_distribution_field_field_formatter_info() {
  return array(
    'opendata_distribution_default' => array(
      'label' => t('Project Open Data Download URL'),
      'field types' => array('opendata_distribution'),
    ),
  );
}


/**
 * Implements hook_field_formatter_view().
 */
function opendata_distribution_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if ($display['type'] == 'opendata_distribution_default') {
    foreach ($items as $delta => $item) {

      $elements = array();
      // Assemble the elements of a distribution if they exist.
      $elements[] = '@type: dcat:Distribution';
      if (!empty($item['title'])) {
        $elements[] = 'title:' . check_plain($item['title']);
      }

      if (!empty($item['description'])) {
        $elements[] = 'description: ' . check_plain($item['description']);
      }

      if (!empty($item['access_url'])) {
        $elements[] = 'accessURL: ' . l($item['access_url'], $item['access_url']);
      }

      if (!empty($item['download_url'])) {
        $elements[] = 'downloadURL: ' . l($item['download_url'], $item['download_url']);
      }

      if (!empty($item['conforms_to'])) {
        $elements[] = 'conformsTo: ' . l($item['conforms_to'], $item['conforms_to']);
      }

      if (!empty($item['described_by'])) {
        $elements[] = 'describedBy: ' . l($item['described_by'], $item['described_by']);
      }

      if (!empty($item['described_by_type'])) {
        $elements[] = 'describedByType: ' . check_plain($item['described_by_type']);
      }

      if (!empty($item['format'])) {
        $elements[] = 'Format: ' . check_plain($item['format']);
      }

      if (!empty($item['media_type'])) {
        $elements[] = 'mediaType: ' . check_plain($item['media_type']);
      }

      $format = (!empty($item['format'])) ? check_plain($item['format']) : 'UNDEFINED';
      $element[$delta] = array(
        '#theme' => 'item_list',
        '#title' => strtoupper($format),
        '#type' => 'ul',
        '#attributes' => array(),
        '#items' => $elements,
      );
    }
  }

  return $element;
}
