<?php
/**
 * @file opendata.module
 */

/**
 * Implements hook_menu().
 */
function opendata_menu() {
  $items['admin/config/services/opendata'] = array(
    'title' => 'OpenData',
    'description' => 'Access OpenData settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opendata_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'opendata.admin.inc',
  );
  $items['data.json'] = array(
    'page callback' => 'opendata_data_json',
    'access arguments' => array('access content'),
  );
  return $items;
}


/**
 * Implements hook_form_alter().
 */
function opendata_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'opendata_dataset_node_form' ) {
    if (empty($form['field_opendata_identifier'][LANGUAGE_NONE][0]['value']['#default_value'])) {
      // Code blatantly stolen from Com::generate.
      $form['field_opendata_identifier']['und'][0]['value']['#default_value'] = opendata_uuid();
    }
  }
}

/**
 * Generates a unique ID.
 *
 * @return strip
 *   A unique string.
 */
function opendata_uuid() {
  return strtolower(sprintf('%04X%04X-%04X-%04X-%04X-%04X%04X%04X', mt_rand(0, 65535), mt_rand(0, 65535), mt_rand(0, 65535), mt_rand(16384, 20479), mt_rand(32768, 49151), mt_rand(0, 65535), mt_rand(0, 65535), mt_rand(0, 65535)));
}

/**
 * Implements hook_views_post_render().
 */
function opendata_views_post_render(&$view, &$output, &$cache) {
  if ($view->name == 'opendata' && $view->current_display == 'page' && variable_get('opendata_theming', TRUE)) {
      drupal_add_css(drupal_get_path('module', 'opendata') . '/opendata.css');
  }
}

/**
 * Implements hook_help().
 */
function opendata_help($path, $arg) {
  switch ($path) {
    case 'admin/help#opendata':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("A helpful entry about your module") . '<p>';
      return $output;
  }
}

/**
 * Outputs dataset nodes into data.json.
 */
function opendata_data_json() {

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'opendata_dataset')
    ->propertyCondition('status', 1)
    ->propertyOrderBy('created', 'DESC')
    // Run the query as user 1.
    ->addMetaData('account', user_load(1));
    $entities = $query->execute();
    $nids = array_keys($entities['node']);
    $nodes = node_load_multiple($nids);

    foreach ($nodes as $node) {

      $row = new stdClass();

      // Common Core fields.
      $row->title = $node->title;
      $row->description = $node->field_opendata_description[LANGUAGE_NONE][0]['value'];
      $row->keyword = $node->field_opendata_keyword[LANGUAGE_NONE][0]['value'];
      $row->modified = $node->field_opendata_modified[LANGUAGE_NONE][0]['value'];
      $row->publisher = $node->field_opendata_publisher[LANGUAGE_NONE][0]['value'];
      $row->person = $node->field_opendata_person[LANGUAGE_NONE][0]['value'];
      $row->mbox = $node->field_opendata_mbox[LANGUAGE_NONE][0]['email'];
      $row->identifier = $node->field_opendata_identifier[LANGUAGE_NONE][0]['value'];
      $row->accessLevel = $node->field_opendata_access_level[LANGUAGE_NONE][0]['value'];

      // Common Core (Required if Applicable) fields.
      if (!empty($node->field_opendata_data_dictionary[LANGUAGE_NONE]['value'])) {
        $row->dataDictionary = $node->field_opendata_data_dictionary[LANGUAGE_NONE]['value'];
      }

      // Build distributions.
      $row->distribution = array();
      foreach ($node->field_opendata_distribution[LANGUAGE_NONE] as $delta => $value) {
        $distribution = new stdClass();
        $distribution->accessURL = $value['access_url'];
        if (!empty($value['size'])) {
          $distribution->size = $value['size'];
        }
        $distribution->format = $value['format'];
        $row->distribution[] = $distribution;
      }

      if (!empty($node->field_opendata_web_service[LANGUAGE_NONE][0])) {
        $row->webService = $node->field_opendata_web_service[LANGUAGE_NONE][0];
      }
      if (!empty($node->field_opendata_license[LANGUAGE_NONE][0])) {
        $row->license = $node->field_opendata_license[LANGUAGE_NONE][0];
      }
      if (!empty($node->field_opendata_spatial[LANGUAGE_NONE][0])) {
        $row->spatial = $node->field_opendata_spatial[LANGUAGE_NONE][0];
      }
      if (!empty($node->field_opendata_temporal[LANGUAGE_NONE][0])) {
        $row->temporal = $node->field_opendata_temporal[LANGUAGE_NONE][0];
      }

      // Extended fields.
      if (!empty($node->field_opendata_release_date[LANGUAGE_NONE][0])) {
        $row->issued = $node->field_opendata_release_date[LANGUAGE_NONE][0];
      }
      if (!empty($node->field_opendata_frequency[LANGUAGE_NONE][0])) {
        $row->accrualPeriodicity = $node->field_opendata_frequency[LANGUAGE_NONE][0];
      }
      if (!empty($node->field_opendata_language[LANGUAGE_NONE][0])) {
        $row->language = $node->field_opendata_language[LANGUAGE_NONE][0];
      }
      if (!empty($node->field_opendata_granularity[LANGUAGE_NONE][0])) {
        $row->granularity = $node->field_opendata_granularity[LANGUAGE_NONE][0];
      }
      if (!empty($node->field_opendata_data_quality[LANGUAGE_NONE][0])) {
        $row->boolean = $node->field_opendata_data_quality[LANGUAGE_NONE][0];
      }
      if (!empty($node->field_opendata_theme[LANGUAGE_NONE][0])) {
        $row->theme = $node->field_opendata_theme[LANGUAGE_NONE][0];
      }
      if (!empty($node->field_opendata_references[LANGUAGE_NONE][0])) {
        $row->references = $node->field_opendata_references[LANGUAGE_NONE][0];
      }
      if (!empty($node->field_opendata_size[LANGUAGE_NONE][0])) {
        $row->size = $node->field_opendata_size[LANGUAGE_NONE][0];
      }
      if (!empty($node->field_opendata_landing_page[LANGUAGE_NONE][0])) {
        $row->landingPage = $node->field_opendata_landing_page[LANGUAGE_NONE][0];
      }
      if (!empty($node->field_opendata_feed[LANGUAGE_NONE][0])) {
        $row->feed = $node->field_opendata_feed[LANGUAGE_NONE][0];
      }

      $rows[] = $row;
    }

    drupal_json_output($rows);
}
